// This program works for only 2 states
#include<stdio.h>

int main()
{
    int tt[2][2][2]; // Transition table for NFA
    // Dimensions corresponding to initial state, input, final state
    
    int dfa[3][2]; // Possible states are 0, 1, 01
    
    int i, j, k; // Iterators
    int flag0=0 , flag1=0; // For filling new states formed
    
    printf("Enter the transition table for NFA: \n");
    // Assuming user will enter -1 if does not enter multiple states
    for(i=0; i<2; i++)
    {
        for(j=0; j<2; j++)
        {
            for(k=0; k<2; k++)
                scanf("%d", &tt[i][j][k]);
        }
    }
    
    // Converting NFA to DFA
    
    for(i=0; i<2; i++)
    {
        for(j=0; j<2; j++)
        {
            if(tt[i][j][0]==0)
            {
                if(tt[i][j][1]==-1)
                    dfa[i][j]=0;
                else if(tt[i][j][1]==1)
                    dfa[i][j]=2;
            }
            else if(tt[i][j][0]==1)
            {
                if(tt[i][j][1]==-1)
                    dfa[i][j]=1;
                else if(tt[i][j][1]==0)
                    dfa[i][j]=2;
            }
        }
    }
    
    for(j=0; j<2; j++)
    {
        flag0=0;
        flag1=0;
        for(i=0; i<2; i++)
        {
            for(k=0; k<2; k++)
            {
                if(tt[i][j][k]==0)
                    flag0=1;
                if(tt[i][j][k]==1)
                    flag1=1;
                
            }
        }
        if(flag0==1 && flag1==1)
            dfa[2][j]=2;
        else if(flag0==1)
            dfa[2][j]=0;
        else if(flag1==1)
            dfa[2][j]=1;
    }
    for(i=0; i<3; i++)
    {
        for(j=0; j<2; j++)
        {
            printf("%d ", dfa[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}
